<%#
  Team7 client ejs - login ajax | Update: 2021/06/15

  CDN List
  crypto-js : https://cdnjs.com/libraries/crypto-js

  PBKDF2 : https://nvlpubs.nist.gov/nistpubs/Legacy/SP/nistspecialpublication800-132.pdf
  scrypt :
    https://blog.visvirial.com/articles/519
    https://www.tarsnap.com/scrypt/scrypt-slides.pdf
    https://github.com/tonyg/js-scrypt
    https://github.com/barrysteyn/node-scrypt
  argon2 :
    https://github.com/antelle/argon2-browser
    https://www.jsdelivr.com/package/npm/argon2-browser
    https://github.com/Daninet/hash-wasm/
    https://stackoverflow.com/questions/768268/how-to-calculate-md5-hash-of-a-file-using-javascript/63287199#63287199
%>
<script src="https://cdnjs.cloudflare.com/ajax/libs/crypto-js/4.0.0/crypto-js.min.js"
  integrity="sha512-nOQuvD9nKirvxDdvQ9OMqe2dgapbPB7vYAMrzJihw5m+aNcf0dX53m6YxM4LgA9u8e9eg9QX+/+mPu8kCNpV2A=="
  crossorigin="anonymous" referrerpolicy="no-referrer"></script>
<script src="https://cdn.jsdelivr.net/npm/hash-wasm@4.7.0/dist/argon2.umd.min.js"></script>
<script type='text/javascript'>
  const bank = <%-JSON.stringify(crypto_bank) %>;
  window.onload = function () { // 読み込み時実行
    window.addEventListener("keydown", function (event) {
      if (event.key === 'Enter') ajax(); // Enterが押されたら関数実行
    })
  };
  var CRYP = { // 暗号化, ハッシュ値導出
    // Encrypto
    encryptoo: function (data, bank) {
      var srcs = CryptoJS.enc.Utf8.parse(data);
      var encrypted = CryptoJS.AES.encrypt(srcs, CryptoJS.enc.Utf8.parse(bank.key), {
        iv: CryptoJS.enc.Utf8.parse(bank.iv),
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.Pkcs7
      });
      return encrypted.ciphertext.toString();
    },
    encryptoo2: function (data, bank) {
      var srcs = CryptoJS.enc.Utf8.parse(data);
      var encrypted = CryptoJS.AES.encrypt(srcs, CryptoJS.enc.Utf8.parse(bank.key), {
        iv: CryptoJS.enc.Utf8.parse(bank.iv),
        mode: CryptoJS.mode.CBC,
        padding: CryptoJS.pad.Pkcs7
      });
      return encrypted;
    },

    // Argon2
    argon2_h: function (data, bank) {
      var salt = bank.salt;
      return hashwasm.argon2id({
        password: data,
        salt,
        parallelism: 2,
        iterations: 5,
        memorySize: 1024 * 10, // memory (KB)
        hashLength: 128, // byte
        outputType: 'encoded',
      });
    },
  }

  function update_iv() { // ivの更新
    var req = new XMLHttpRequest();
    req.onreadystatechange = function () {
      if (req.readyState == 4) {
        if (req.status == 200) {
          bank.iv = req.responseText;
        }
      }
    }
    req.open('POST', 'u', false); // 同期
    req.send();
  }

  function ajax() { // xhrで送信
    var req = new XMLHttpRequest();
    var user = document.getElementById('login_fie_input_user').value;
    var pass = document.getElementById('login_fie_input_pass').value;
    if (user.length <= 0 || pass.length <= 0) return;
    req.onreadystatechange = function () {
      if (req.readyState == 4) {
        if (req.status == 200) {
          location.href = req.responseText;
        } else if (req.status == 401) {
          var noti = document.getElementById('login_notice');
          noti.style.display = 'block';
        }
      }
    }
    update_iv(); // iv値更新
    req.open('POST', '', true); // 非同期
    req.setRequestHeader('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
    CRYP.argon2_h(pass, bank).then((pp) => {
      console.log(pp);
      var s_tx = 'password=' + encodeURIComponent(CRYP.encryptoo(pp, bank)) + '&username=' + encodeURIComponent(CRYP.encryptoo(user, bank));
      req.send(s_tx);
    });
  }
</script>